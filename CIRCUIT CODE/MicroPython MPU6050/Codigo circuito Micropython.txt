from machine import Pin, I2C
import time
import struct

I2C_SCL = 22
I2C_SDA = 21
MPU6050_ADDR = 0x68

IMPACT_THRESHOLD = 2.5
TEMP_WARNING = 50.0
TEMP_CRITICAL = 60.0 

i2c = I2C(0, scl=Pin(I2C_SCL), sda=Pin(I2C_SDA), freq=400000)

def init_mpu6050():
    try:
        i2c.writeto_mem(MPU6050_ADDR, 0x6B, b'\x00')
        print("‚úÖ MPU6050 activado correctamente.\n")
    except Exception as e:
        print("‚ùå Error al iniciar MPU6050:", e)

def read_mpu6050():
    try:
        data = i2c.readfrom_mem(MPU6050_ADDR, 0x3B, 14)
        accel = struct.unpack(">hhh", data[0:6])
        temp = struct.unpack(">h", data[6:8])[0]
        gyro = struct.unpack(">hhh", data[8:14])

        accel = [x / 16384.0 for x in accel]
        temp = (temp / 340.0) + 36.53
        gyro = [x / 131.0 for x in gyro]

        return accel, temp, gyro

    except Exception as e:
        print("‚ùå Error en la lectura del MPU6050:", e)
        return None, None, None

init_mpu6050()

while True:
    accel, temp, gyro = read_mpu6050()
    if accel is not None:
        ax, ay, az = accel
        impact_force = (ax**2 + ay**2 + az**2) ** 0.5

        print(f"üìä Aceleraci√≥n (g): X={ax:.2f}, Y={ay:.2f}, Z={az:.2f}")
        print(f"üå°Ô∏è Temperatura MPU6050: {temp:.2f}¬∞C")
        print(f"üîÑ Giroscopio (¬∞/s): {gyro}\n")

        if impact_force >= IMPACT_THRESHOLD:
            print("üö® ¬°IMPACTO DETECTADO! üö®")

        if temp >= TEMP_CRITICAL:
            print("üî•üö® ¬°PELIGRO! Temperatura muy alta. üö®üî•")
        elif temp >= TEMP_WARNING:
            print("‚ö†Ô∏è Advertencia: Temperatura elevada. ‚ö†Ô∏è")

    time.sleep(0.5)
